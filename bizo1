import pygame
pygame.init()

# створення головного вікна
window = pygame.display.set_mode((1366, 700))


white = (255, 255, 255)
black = (0, 0, 0)

# створення об'єкту "годинник" для встановлення частоти кадрів
clock = pygame.time.Clock()

# головний цикл гри
game = True

class Bullet1():
    def __init__(self, x, y):
        self.rect = pygame.Rect(x, y, 5, 5) # 5,5 - розміри пулі

    def move(self): # функція для створення руху пулі
        self.rect.x += 10 # 10 - швидкість пулі
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_h:
              player1.shoot()

class Player(): # клас для створення шаблону персонажа
    def __init__(self,x,y,width,height,image):
        self.original_image = pygame.image.load(image)
        self.image = pygame.transform.scale(self.original_image, (width, height))  # Зміна розміру зображення
        self.rect = self.image.get_rect() # "межі" персонажа
        self.rect.x = x # координати по ширині
        self.rect.y = y # координати по висоті
        self.width = width # ширина
        self.height = height # висота
        self.is_jump = False  # змінна для визначення стану прижку
        self.jump_count = 5  # лічильник для керування прижком

    def jumping(self):  # функція для виконання прижку
        if not self.is_jump:  # якщо персонаж не в стані прижку
            self.is_jump = True  # зміна стану прижку
            self.jump_count = 10  # початкове значення лічильника прижку
        
    def jump(self):  # метод для руху персонажа
        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE]:  # якщо натиснута клавіша пробілу
            self.jumping()  # виконати прижок
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
              player1.shoot()

        if self.is_jump:
            if self.jump_count >= -10:  # поки лічильник більше або рівний -10
                neg = 1  # коефіцієнт для керування напрямком прижку
                if self.jump_count < 0:  # якщо лічильник менше 0
                    neg = -1 # змінити напрямок прижку
                self.rect.y -= (self.jump_count ** 2) * 0.5 * neg  # формула для прижку
                self.jump_count -= 1  # зменшення лічильника
            else:  # якщо лічильник вийшов за межі -10
                self.is_jump = False  # зміна стану прижку

    def move(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and self.rect.x > 99:
            self.rect.x -= 4
        if keys[pygame.K_RIGHT] and self.rect.x < 1175:
            self.rect.x += 4
        if keys[pygame.K_DOWN] and self.rect.y < 575:
            self.rect.y += 4
        
    def shoot(self):
        bullet = Bullet1(self.rect.centerx, self.rect.centery) # створення пулі
        bullet.append(bullet) # додавання пулі до списку пуль

background_image = pygame.image.load('temple.jpg')  # Замість 'background.jfif' вкажіть шлях до вашого зображення фону
background_image = pygame.transform.scale(background_image, (1366, 700)) # задання розмірів фонового зображення


player1 = Player(100, 575, 100, 100, 'primat-removebg-preview.png')

pygame.mixer.music.load('kingdom-of-fantasy-version-60s-10817.mp3')
# Відтворення музики 
pygame.mixer.music.play()

white = (255, 255, 255)
black = (0, 0, 0)


while game:
    window.fill(white)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game = False
    
    for bullet in Bullet1:
        bullet.move()
        pygame.draw.rect(window, (255, 0, 0), bullet.rect)

    window.blit(background_image, (0, 0))
    window.blit(player1.image, (player1.rect.x, player1.rect.y))
    player1.move()
    player1.jump()
    # задання частоти кадрів та оновлення екрану
    clock.tick(30)
    pygame.display.update()

pygame.quit()
